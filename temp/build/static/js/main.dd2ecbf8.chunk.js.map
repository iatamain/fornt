{"version":3,"sources":["context/auth.context.js","pages/Registration.js","hooks/http.hook.js","pages/TodoNavbar.js","hooks/list.hook.js","pages/Todo.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Registration","useContext","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","console","log","clearError","useHttp","username","password","className","type","id","name","placeholder","value","TodoNavbar","history","useHistory","auth","onClick","event","preventDefault","push","AppendList","i","length","component","document","createElement","header","innerText","nametask","main","span","descriptiontask","appendChild","querySelector","Todo","nameTask","descriptionTask","dataTask","parse","localStorage","getItem","window","location","reload","onload","App","setToken","setUserId","jwtToken","setItem","removeItem","useEffect","useAuth","routes","path","to","exact","useRoutes","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.dd2ecbf8.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n})","import React , { Component, useState, useContext } from 'react';\r\nimport styles from './Registration.css';\r\nimport { useHttp } from '../hooks/http.hook';\r\nimport { AuthContext } from '../context/auth.context';\r\n\r\nexport const Registration = () => {\r\n  const auth = useContext(AuthContext)\r\n  const {loading, error, request} = useHttp()\r\n  const [form, setForm] = useState({\r\n    username: '',\r\n    password: ''\r\n  });\r\n\r\n  const changeHandler = event => {\r\n    setForm({ ...form, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      console.log(form)\r\n      const data = await request('/api/auth/register', 'POST', {...form})\r\n      console.log(data.message);\r\n    } catch(e) {\r\n      \r\n    }\r\n  }\r\n\r\n  const loginHandler = async () => {\r\n    try {\r\n      console.log(form)\r\n      const data = await request('/api/auth/login', 'POST', {...form})\r\n      auth.login(data.token, data.userId)\r\n    } catch(e) {\r\n      \r\n    }\r\n  }\r\n\r\n    return(\r\n      <div className=\"parrent\">\r\n        <div className=\"box\">\r\n          <h1> Login </h1>\r\n          <input type='text' id='username' name='username' placeholder='Username' />\r\n          <input type='password' id='password' name='password' placeholder='Password'  />\r\n          \r\n          <input type='submit' name='' value='Войти' />\r\n          <input type='submit' name='' value='Зарегистрироваться' />\r\n        </div>\r\n        <footer>\r\n          By Vilatiy Volkov\r\n          By Alexandra Paxolkina\r\n          By Ekaterina Trochenko\r\n        </footer>\r\n      </div>\r\n    \r\n    )\r\n}","import {useState, useCallback} from 'react'\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback( async( url, \r\n                                        method='GET', \r\n                                        body = null, \r\n                                        headers= {}) => {\r\n\r\n        setLoading(true)\r\n\r\n        try {\r\n            if(body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if(!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n            setLoading(false)\r\n            return data\r\n\r\n        } catch(e) {    \r\n            console.log('catch e ', e.message)\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = () => {\r\n        setError(null)\r\n    }\r\n\r\n    return {loading, request, error, clearError}\r\n}","import React , { Component, useContext } from 'react';\r\nimport {useHistory, NavLink} from 'react-router-dom'\r\nimport {AuthContext} from '../context/auth.context.js'\r\nimport styles from './Todo.css';\r\nimport styless from './Registration.css';\r\n\r\n\r\n\r\nexport const TodoNavbar = () => {\r\n\r\n\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext)\r\n    let isCreateWindow = true;\r\n\r\n    const logoutHandler = event => {\r\n        event.preventDefault()\r\n        auth.logout()\r\n        history.push('/')\r\n    }\r\n\r\n        return(\r\n            <div className= \"headerMain\" >\r\n                <header className = \"headerNav\"> \r\n                    <h1> ITracers task-manager</h1>\r\n                    <input className=\"returnButton\" type=\"button\" value=\"Create List\"></input>\r\n                    <input className=\"returnButton\" type=\"button\" value=\"Exit\" onClick={logoutHandler}></input>\r\n                </header>\r\n            </div>\r\n\r\n                  \r\n        )\r\n}\r\n\r\n","import {useState, useCallback} from 'react'\r\n\r\nexport const ListHook = () => {\r\n    const request = useCallback( async( url, \r\n                                        method='GET', \r\n                                        body = null, \r\n                                        headers= {}) => {\r\n\r\n\r\n        try {\r\n            if(body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n\r\n            const response = await fetch(url, {method, body, headers})\r\n            const data = await response.json()\r\n\r\n            if(!response.ok) {\r\n                throw new Error(data.message || 'Что-то пошло не так')\r\n            }\r\n\r\n            return data\r\n\r\n        } catch(e) {    \r\n            console.log('catch e ', e.message)\r\n            throw e\r\n        }\r\n\r\n    }, [])\r\n    \r\n    return { request }\r\n}\r\n\r\nexport const AppendList = (data) => {\r\n    for(let i = 0; i < data.length; i++) {\r\n        let component = document.createElement('div');\r\n        component.className = 'todoList'\r\n\r\n        let header = document.createElement('header')\r\n        header.className = 'todoListHeader'\r\n        header.innerText = data[i].nametask\r\n\r\n        let main = document.createElement('main')\r\n        main.className = 'todoListMain'\r\n\r\n        let span = document.createElement('span')\r\n        span.innerText = data[i].descriptiontask\r\n\r\n        main.appendChild(span)\r\n\r\n        component.appendChild(header)\r\n        component.appendChild(main)\r\n\r\n        console.log(component)\r\n\r\n        let root = document.querySelector('.todoContainer')\r\n        root.appendChild(component)\r\n    }\r\n}","import { TodoNavbar } from './TodoNavbar'\r\nimport { TodoList } from './TodoList'\r\nimport { ListHook, AppendList } from '../hooks/list.hook';\r\nimport React , { Component, useContext, forwardRef } from 'react';\r\nimport { render } from 'react-dom'\r\nimport appendReactDOM from 'append-react-dom';\r\nimport styles from './Todo.css';\r\nimport styless from './Registration.css';\r\n\r\n\r\nexport const Todo = () => {\r\n    const { request } = ListHook();\r\n\r\n    window.onload = async () => {\r\n        try{\r\n            const userId = JSON.parse(localStorage.getItem('userData')).userId\r\n            //console.log('userData: ' , userId ) //Убрать\r\n            //console.log('Окно загрузилось') //Убрать\r\n            const data = await request('/api/list/required', 'POST', {userId})\r\n            console.log(data.message);\r\n\r\n            const root = document.querySelector('.todoContainer')\r\n\r\n            AppendList(data.message)\r\n        } catch(e) {}\r\n    }\r\n\r\n    async function addList() {\r\n        let nameTask = document.querySelector('#nametask').value;\r\n        let descriptionTask = document.querySelector('#descriptiontask').value;\r\n        const dataTask = {\r\n            nameTask: nameTask,\r\n            descriptiontask: descriptionTask,\r\n            userId : JSON.parse(localStorage.getItem('userData')).userId\r\n        }\r\n        console.log(dataTask)\r\n        const data = await request('/api/list/push', 'POST', dataTask)\r\n\r\n        window.location.reload()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TodoNavbar />\r\n            \r\n            <div className=\"todoContainer\">\r\n\r\n            </div>\r\n\r\n            <div className=\"main\">       \r\n                <div className=\"box\">\r\n                    <h1> Создание новой задачи </h1>\r\n                    <h2> Название задачи </h2>\r\n                    <input type='text' id='nametask' name='nametask' />\r\n                    <h2> Описание задачи </h2>\r\n                    <input type='text' id='descriptiontask' name='descriptiontask' />\r\n                    <input type='submit' name='' onClick={addList}></input>\r\n                </div>\r\n            </div>\r\n        )\r\n        </div>\r\n    )\r\n} \r\n\r\n","import React from 'react';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/auth.context';\n\nfunction App() {\n  const {token, login, logout, userId} = useAuth()\n  const isAuthenticated = !!token\n  const routes = useRoutes(isAuthenticated)\n  return (\n    <AuthContext.Provider value={{\n      token, login, logout, userId\n      \n    }}>\n      <div>\n        <Router>\n          {routes}\n        </Router>\n      </div>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import {useState, useCallback, useEffect} from 'react'\r\n \r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n    const[token, setToken] = useState(null)\r\n    const[userId, setUserId] = useState(null)\r\n\r\n    const login = useCallback( (jwtToken, id) => {\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n\r\n        localStorage.setItem(storageName, JSON.stringify({\r\n            userId: id, token: jwtToken\r\n        }))\r\n    }, [])\r\n\r\n    const logout = useCallback( () => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        localStorage.removeItem(storageName)\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if(data && data.token){\r\n            login(data.token, data.userId)\r\n        }\r\n    }, [login])\r\n\r\n    return {login, logout, token, userId}\r\n}\r\n","import React from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {Registration} from './pages/Registration'\r\nimport {Todo} from './pages/Todo.js'\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n    if(isAuthenticated){\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/todo\">\r\n                    <Todo/>\r\n                </Route>\r\n                <Redirect to='/todo' />\r\n            </Switch>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\" exact>\r\n                <Registration />\r\n            </Route>\r\n            <Redirect to=\"/\" />\r\n        </Switch>   \r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}